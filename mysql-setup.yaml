- name: Install and init MariaDB
  become: yes
  hosts: controller
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # Additional SSH options
  tasks:
    - name: Check if MySQL is installed
      stat:
        path: /usr/bin/mysql
      register: mysql_installed

    - name: Ensure required packages are installed
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - mariadb
        - mariadb-server
        - mariadb-server-galera
        - python3-PyMySQL
        - galera
        - expect
      when: not mysql_installed.stat.exists

    - name: Ensure mariadb service is started and enabled
      when: not mysql_installed.stat.exists
      service:
        name: mariadb
        state: started
        enabled: yes
    - name: Run mysql_secure_installation
      expect:
        command: mysql_secure_installation
        responses:
          "Enter current password for root": ""
          "Set root password": "n"
          "Remove anonymous users": "y"
          "Disallow root login remotely": "y"
          "Remove test database": "y"
          "Reload privilege tables now": "y"
        timeout: 1
      register: secure_mariadb
      failed_when: "'... Failed!' in secure_mariadb.stdout_lines"
    #controller -1>
- name: database permissions on controller-1
  hosts: controller-1
  become: yes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # Additional SSH options
  tasks:
    - name: Grant process to clustercheck_user
      shell: |
        mysql -e "GRANT USAGE ON *.* to wsrep_sst_user@'%' IDENTIFIED BY '{{ wsrep_user }}';"
        mysql -e "GRANT ALL PRIVILEGES on *.* to wsrep_sst_user@'%';"
        mysql -ie "GRANT PROCESS ON *.* TO 'clustercheck_user'@'localhost' IDENTIFIED BY '{{ clustercheck_pass }}';"
        mysql -ie "GRANT PROCESS ON *.* TO 'clustercheck_user'@'%' IDENTIFIED BY '{{ clustercheck_pass }}';"
        mysql -ie "FLUSH PRIVILEGES;"
      vars:
        wsrep_user: "userdoseila"
        clustercheck_pass: "passaasenha"
      register: grant_process_result
      ignore_errors: yes
    #controller -1<
- name: maria/mysql configuration with galera
  hosts: controller
  become: yes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # Additional SSH options
  tasks:
    - name: Get eth0 IP address
      shell: ip addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | head -n1
      register: eth0_ip

    - name: Create or overwrite my.cnf configuration file
      copy:
        dest: /etc/my.cnf.d/openstack.cnf
        content: |
          [mysqld]
          #Configuração INNODB
          innodb_autoinc_lock_mode=2
          innodb_flush_log_at_trx_commit=0
          innodb_log_file_size=128M
          innodb-buffer-pool-size=8G

          max_connections=4096
          max_allowed_packet=128M
          query_cache_limit=2M
          query_cache_size=512M
          table-definition-cache=4096
          table-open-cache=6000
          sort_buffer_size=32M

          #Allow the server to accept connections on all interfaces.
          bind-address= {{ eth0_ip.stdout }}

          #Mandatory settings
          wsrep_on=ON
          wsrep_provider=/usr/lib64/galera/libgalera_smm.so
          wsrep_provider_options="pc.recovery=TRUE;gcache.size=300M"
          wsrep_cluster_address="gcomm://10.66.66.10,10.66.66.63,10.66.66.119"
          binlog_format=row
          default_storage_engine=InnoDB

          #Galera Synchronization Configuration
          wsrep_sst_auth=wsrep_sst_user:{{ wsrep_user }}
          wsrep_sst_method=rsync

          #Galera Node Configuration
          wsrep_node_address="{{ eth0_ip.stdout }}"
          wsrep_node_name="{{ ansible_hostname}}"
          wsrep_cluster_name="openstack_db_cluster"
      vars:
        wsrep_user: "userdoseila"
        clustercheck_pass: "passaasenha"
      register: change_config
  #controller -1>
- name: Galera cluster on controller-1
  hosts: controller-1
  become: yes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # Additional SSH options
  tasks:
    - name: Init cluster
      shell: galera_new_cluster
- name: Including other hosts to cluster
  hosts: controller-2:controller-3
  become: yes
  vars:
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no" # Additional SSH options
  tasks:
    - name: mariadb service restart
      service:
        name: mariadb
        state: restarted
        enabled: yes